name: Build and Release Executables

# Dieser Workflow wird bei jedem neuen Release gestartet
on:
  release:
    types: [ created ]

jobs:
  build:
    # Definiere eine Build-Matrix für verschiedene Betriebssysteme und Architekturen
    strategy:
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            arch: x64
            gradle-tasks: "createWindowsExecutableX64 createWindowsMsiX64 createWindowsAppImageX64"
          - os: windows-latest
            arch: arm64
            gradle-tasks: "createWindowsExecutableArm64 createWindowsMsiArm64 createWindowsAppImageArm64"
          
          # macOS builds
          - os: macos-13  # Intel runners
            arch: x64
            gradle-tasks: "createMacOSDmgX64 createMacOSPkgX64 createMacOSAppImageX64"
          - os: macos-latest  # ARM runners
            arch: arm64
            gradle-tasks: "createMacOSDmgArm64 createMacOSPkgArm64 createMacOSAppImageArm64"
          
          # Linux builds
          - os: ubuntu-latest
            arch: x64
            gradle-tasks: "createLinuxDebX64 createLinuxRpmX64 createLinuxAppImageX64"
          - os: ubuntu-latest
            arch: arm64
            gradle-tasks: "createLinuxDebArm64 createLinuxRpmArm64 createLinuxAppImageArm64"

    # Der Job wird auf dem in der Matrix definierten Betriebssystem ausgeführt
    runs-on: ${{ matrix.os }}

    steps:
      # Schritt 1: Code auschecken
      - name: Checkout repository
        uses: actions/checkout@v4

      # Schritt 2: Java Development Kit (JDK) einrichten
      # Stelle sicher, dass du eine JDK-Version wählst, die jpackage enthält (JDK 14+)
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-package: 'jdk+fx'
          java-version: '24'
          distribution: 'liberica'

      # Schritt 3: Gradle Wrapper ausführbar machen (wichtig für Linux/macOS)
      - name: Make Gradle wrapper executable
        if: runner.os != 'Windows'
        run: chmod +x ./gradlew

      # Schritt 4: Führe die architektur-spezifischen Gradle-Tasks aus
      - name: Build with Gradle (${{ matrix.arch }})
        run: ./gradlew ${{ matrix.gradle-tasks }}

      # Schritt 5: Lade alle erstellten Artefakte mit dem GitHub CLI hoch
      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.event.release.tag_name }} build/dist/*
