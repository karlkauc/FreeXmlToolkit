/*
 * FreeXMLToolkit - Universal Toolkit for XML
 * Copyright (c) Karl Kauc 2025.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package org.fxt.freexmltoolkit.controls;

import javafx.application.Platform;
import javafx.stage.Stage;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.testfx.framework.junit5.ApplicationExtension;
import org.testfx.framework.junit5.Start;

import java.io.File;
import java.lang.reflect.Method;
import java.nio.file.Files;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Test that verifies the exact XML output generated by FundsXML4 IntelliSense
 * to ensure attributes are filtered out and complex choice elements don't create unwanted nesting.
 */
@ExtendWith(ApplicationExtension.class)
class XmlCodeEditorFundsXML4OutputTest {

    private XmlCodeEditor xmlCodeEditor;
    private XmlEditor xmlEditor;
    private File testXsdFile;
    private File testXmlFile;

    @Start
    void start(Stage stage) {
        xmlCodeEditor = new XmlCodeEditor();
        xmlEditor = new XmlEditor();

        // Set up the parent-child relationship
        xmlCodeEditor.setParentXmlEditor(xmlEditor);

        stage.setScene(new javafx.scene.Scene(xmlCodeEditor, 800, 600));
        stage.show();
    }

    @BeforeEach
    void setUp() throws Exception {
        // Use the exact FundsXML4 XSD structure that was causing problems
        String xsdContent = """
                <?xml version="1.0" encoding="UTF-8"?>
                <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <xs:element name="FundsXML4">
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="ControlData" minOccurs="1">
                                    <xs:complexType>
                                        <xs:sequence>
                                            <xs:element name="UniqueDocumentID" type="xs:string" minOccurs="1"/>
                                            <xs:element name="DocumentGenerated" type="xs:string" minOccurs="1"/>
                                            <xs:element name="ContentDate" type="xs:string" minOccurs="1"/>
                                            <xs:element name="DataSupplier" minOccurs="1">
                                                <xs:complexType>
                                                    <xs:sequence>
                                                        <xs:element name="SystemCountry" type="xs:string" minOccurs="1"/>
                                                        <xs:element name="Short" type="xs:string" minOccurs="1"/>
                                                        <xs:element name="Name" minOccurs="1">
                                                            <xs:complexType>
                                                                <xs:simpleContent>
                                                                    <xs:extension base="xs:string">
                                                                        <xs:attribute name="language" type="xs:string" use="required"/>
                                                                        <xs:attribute name="maxLen" type="xs:int" use="required"/>
                                                                    </xs:extension>
                                                                </xs:simpleContent>
                                                            </xs:complexType>
                                                        </xs:element>
                                                        <xs:element name="Type" minOccurs="0">
                                                            <xs:complexType>
                                                                <xs:choice>
                                                                    <xs:element name="ListedType" type="xs:string"/>
                                                                    <xs:element name="UnlistedType" type="xs:string"/>
                                                                </xs:choice>
                                                            </xs:complexType>
                                                        </xs:element>
                                                    </xs:sequence>
                                                </xs:complexType>
                                            </xs:element>
                                        </xs:sequence>
                                    </xs:complexType>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                </xs:schema>
                """;

        // Create temporary XSD file
        testXsdFile = File.createTempFile("funds-xml4-output-test", ".xsd");
        testXsdFile.deleteOnExit();
        Files.write(testXsdFile.toPath(), xsdContent.getBytes());

        // Create temporary XML file
        testXmlFile = File.createTempFile("test-xml", ".xml");
        testXmlFile.deleteOnExit();
        Files.write(testXmlFile.toPath(), "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n".getBytes());

        // Set up the XmlEditor with XSD
        CountDownLatch latch = new CountDownLatch(1);
        Platform.runLater(() -> {
            try {
                xmlEditor.setXsdFile(testXsdFile);
                xmlEditor.setXmlFile(testXmlFile);
                xmlCodeEditor.setEditorMode(XmlCodeEditor.EditorMode.XML_WITH_XSD);
                latch.countDown();
            } catch (Exception e) {
                e.printStackTrace();
                latch.countDown();
            }
        });

        assertTrue(latch.await(10, TimeUnit.SECONDS), "Setup should complete within 10 seconds");
    }

    @Test
    void testFundsXML4GeneratedXMLDoesNotContainAttributes() throws Exception {
        CountDownLatch latch = new CountDownLatch(1);

        Platform.runLater(() -> {
            try {
                // Wait for XSD processing to complete
                Thread.sleep(2000);

                // Use reflection to access the private method
                Method getMandatoryChildElementsMethod = XmlCodeEditor.class.getDeclaredMethod("getMandatoryChildElements", String.class);
                getMandatoryChildElementsMethod.setAccessible(true);

                // Test FundsXML4 mandatory children
                @SuppressWarnings("unchecked")
                List<String> fundsXML4Children = (List<String>) getMandatoryChildElementsMethod.invoke(xmlCodeEditor, "FundsXML4");

                System.out.println("=== FundsXML4 Mandatory Children ===");
                for (String child : fundsXML4Children) {
                    System.out.println("  - " + child);
                }

                // Test DataSupplier mandatory children
                @SuppressWarnings("unchecked")
                List<String> dataSupplierChildren = (List<String>) getMandatoryChildElementsMethod.invoke(xmlCodeEditor, "DataSupplier");

                System.out.println("=== DataSupplier Mandatory Children ===");
                for (String child : dataSupplierChildren) {
                    System.out.println("  - " + child);
                }

                // Test Name mandatory children (should be empty because attributes are filtered out)
                @SuppressWarnings("unchecked")
                List<String> nameChildren = (List<String>) getMandatoryChildElementsMethod.invoke(xmlCodeEditor, "Name");

                System.out.println("=== Name Mandatory Children ===");
                for (String child : nameChildren) {
                    System.out.println("  - " + child);
                }

                // Assertions: Verify that attributes are not in mandatory children
                // FundsXML4 should only have ControlData
                assertEquals(1, fundsXML4Children.size(), "FundsXML4 should have exactly 1 mandatory child");
                assertEquals("ControlData", fundsXML4Children.get(0), "FundsXML4's mandatory child should be ControlData");

                // DataSupplier should have SystemCountry, Short, Name but NOT Type (optional)
                assertEquals(3, dataSupplierChildren.size(), "DataSupplier should have exactly 3 mandatory children");
                assertTrue(dataSupplierChildren.contains("SystemCountry"), "DataSupplier should contain SystemCountry");
                assertTrue(dataSupplierChildren.contains("Short"), "DataSupplier should contain Short");
                assertTrue(dataSupplierChildren.contains("Name"), "DataSupplier should contain Name");
                assertFalse(dataSupplierChildren.contains("Type"), "DataSupplier should NOT contain Type (it's optional)");

                // Name should have NO mandatory children (attributes should be filtered out)
                assertTrue(nameChildren.isEmpty(), "Name element should have no mandatory children (attributes should be filtered out)");

                // Test the actual XML generation
                Method createElementMethod = XmlCodeEditor.class.getDeclaredMethod("createElementWithMandatoryChildren", String.class, String.class, int.class, String.class);
                createElementMethod.setAccessible(true);

                String generatedXML = (String) createElementMethod.invoke(xmlCodeEditor, "FundsXML4", "", 0, null);

                System.out.println("=== Generated XML ===");
                System.out.println(generatedXML);

                // Verify the generated XML does not contain attributes or unwanted elements
                assertFalse(generatedXML.contains("@language"), "Generated XML should not contain @language");
                assertFalse(generatedXML.contains("@maxLen"), "Generated XML should not contain @maxLen");
                assertFalse(generatedXML.contains("<language>"), "Generated XML should not contain language element");
                assertFalse(generatedXML.contains("<maxLen>"), "Generated XML should not contain maxLen element");
                assertFalse(generatedXML.contains("<Type>"), "Generated XML should not contain optional Type element");
                assertFalse(generatedXML.contains("<ListedType>"), "Generated XML should not contain ListedType element");
                assertFalse(generatedXML.contains("<UnlistedType>"), "Generated XML should not contain UnlistedType element");

                // Verify it contains the expected elements
                assertTrue(generatedXML.contains("<FundsXML4>"), "Generated XML should contain FundsXML4");
                assertTrue(generatedXML.contains("<ControlData>"), "Generated XML should contain ControlData");
                assertTrue(generatedXML.contains("<UniqueDocumentID>"), "Generated XML should contain UniqueDocumentID");
                assertTrue(generatedXML.contains("<DocumentGenerated>"), "Generated XML should contain DocumentGenerated");
                assertTrue(generatedXML.contains("<ContentDate>"), "Generated XML should contain ContentDate");
                assertTrue(generatedXML.contains("<DataSupplier>"), "Generated XML should contain DataSupplier");
                assertTrue(generatedXML.contains("<SystemCountry>"), "Generated XML should contain SystemCountry");
                assertTrue(generatedXML.contains("<Short>"), "Generated XML should contain Short");
                assertTrue(generatedXML.contains("<Name>"), "Generated XML should contain Name");

                // Expected XML format
                String expectedPattern = """
                        <FundsXML4>
                            <ControlData>
                                <UniqueDocumentID></UniqueDocumentID>
                                <DocumentGenerated></DocumentGenerated>
                                <ContentDate></ContentDate>
                                <DataSupplier>
                                    <SystemCountry></SystemCountry>
                                    <Short></Short>
                                    <Name></Name>
                                </DataSupplier>
                            </ControlData>
                        </FundsXML4>""";

                System.out.println("=== Expected XML Pattern ===");
                System.out.println(expectedPattern);

                latch.countDown();
            } catch (Exception e) {
                e.printStackTrace();
                latch.countDown();
            }
        });

        assertTrue(latch.await(15, TimeUnit.SECONDS), "Test should complete within 15 seconds");
    }
}